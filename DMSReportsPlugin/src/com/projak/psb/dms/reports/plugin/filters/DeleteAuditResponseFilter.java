package com.projak.psb.dms.reports.plugin.filters;

import java.sql.Connection;

import javax.security.auth.Subject;
import javax.servlet.http.HttpServletRequest;

import com.filenet.api.core.Document;
import com.filenet.api.core.Domain;
import com.filenet.api.core.Factory;
import com.filenet.api.core.ObjectStore;
import com.filenet.api.exception.EngineRuntimeException;
import com.filenet.api.util.UserContext;
import com.ibm.ecm.extension.PluginResponseFilter;
import com.ibm.ecm.extension.PluginServiceCallbacks;
import com.ibm.json.java.JSONObject;
import com.projak.psb.dms.reports.plugin.utils.CEConnection;
import com.projak.psb.dms.reports.plugin.utils.DBOperationsUtil;
import com.projak.psb.dms.reports.plugin.utils.GetEmployeeDetails;

/**
 * Provides an abstract class that is extended to create a filter for responses
 * from a particular service. The response from the service is provided to the
 * filter in JSON format before it is returned to the web browser. The filter
 * can then modify that response, and the modified response is returned to the
 * web browser.
 */
public class DeleteAuditResponseFilter extends PluginResponseFilter {

	/**
	 * Returns an array of the services that are extended by this filter.
	 * 
	 * @return A <code>String</code> array of names of the services. These are
	 *         the servlet paths or Struts action names.
	 */
	public String[] getFilteredServices() {
		return new String[] { "/p8/deleteItem" };
	}

	/**
	 * Filters the response from the service.
	 * 
	 * @param serverType
	 *            A <code>String</code> that indicates the type of server that
	 *            is associated with the service. This value can be one or more
	 *            of the following values separated by commas:
	 *            <table border="1">
	 *            <tr>
	 *            <th>Server Type</th>
	 *            <th>Description</th>
	 *            </tr>
	 *            <tr>
	 *            <td><code>p8</code></td>
	 *            <td>IBM FileNet P8</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>cm</code></td>
	 *            <td>IBM Content Manager</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>od</code></td>
	 *            <td>IBM Content Manager OnDemand</td>
	 *            </tr>
	 *         	  <tr>
	 *         		<td><code>cmis</code></td>
	 *         		<td>Content Management Interoperability Services</td>
	 *         	  </tr>
	 *            <tr>
	 *            <td><code>common</code></td>
	 *            <td>For services that are not associated with a particular
	 *            server</td>
	 *            </tr>
	 *            </table>
	 * @param callbacks
	 *            An instance of the
	 *            <code>{@link com.ibm.ecm.extension.PluginServiceCallbacks PluginServiceCallbacks}</code>
	 *            class that contains functions that can be used by the service.
	 *            These functions provide access to plug-in configuration and
	 *            content server APIs.
	 * @param request
	 *            An <code>HttpServletRequest</code> object that provides the
	 *            request. The service can access the invocation parameters from
	 *            the request.
	 * @param jsonResponse
	 *            The <code>JSONObject</code> object that is generated by the
	 *            service. Typically, this object is serialized and sent as the
	 *            response. The filter modifies this object to change the
	 *            response that is sent.
	 * @throws Exception
	 *             For exceptions that occur when the service is running.
	 *             Information about the exception is logged as part of the
	 *             client logging and an error response is automatically
	 *             generated and returned.
	 */
	public void filter(String serverType, PluginServiceCallbacks callbacks,
			HttpServletRequest request, JSONObject jsonResponse) throws Exception {
		System.out.println("DeleteAuditResponseFilter.filter()");
		String userName = request.getRemoteUser();
		String repositoryName = request.getParameter("repositoryId");
		System.out.println("userName&RepoName: "+userName+"\t"+repositoryName);
		String ipAddress = request.getRemoteAddr();
		System.out.println("IPAddress: "+ipAddress);
		String eventType = "Delete";
		String eventStatus = "Deletion successful";
		
		String docId = request.getParameter("docid");
		ObjectStore objectStore = null;
		 try {
             Subject subject = callbacks.getP8Subject(repositoryName);
             if (subject != null) {
                 UserContext.get().pushSubject(subject);
                 objectStore = callbacks.getP8ObjectStore(repositoryName);
                 System.out.println("ObjectStoreName: " + objectStore.get_DisplayName());
             } else {
                 System.out.println("Subject is null. User may not be authenticated.");
                 CEConnection ce = new CEConnection();
                 com.filenet.api.core.Connection ceConnection = ce.establishConnection();
         		
         		Domain dom = ce.fetchDomain();
         		
         		objectStore = Factory.ObjectStore.fetchInstance(dom, repositoryName, null);
         		System.out.println("ObjectStoreName: " + objectStore.get_DisplayName());
         		System.out.println("connection status is:" + ce.isConnected());
             }
         } catch (EngineRuntimeException e) {
             System.out.println("EngineRuntimeException in DepartmentWiseMetadataReport Check:" + e.getMessage());
         }
		//IPTest,{5CC6CE40-6C08-4EA6-9A04-E8C93648B879},{70BDCF89-0000-C413-A795-AAB02665DAA5}
		String[] values = docId.split(",");
		String objectId = values[2].toString();
        System.out.println(values[2]);
		Document document = Factory.Document.fetchInstance(objectStore, objectId, null);
		String fileName = document.getProperties().getStringValue("DocumentTitle");
	//	String fileName = "Document File path";
		
		String ldaploginid = request.getRemoteUser();
		GetEmployeeDetails empDetails = new GetEmployeeDetails();
		JSONObject employeeDetails = empDetails.getEmployeeDetails(userName);
		
		System.out.println("userDetailsObj from API: "+employeeDetails);
		
		System.out.println("SOLID: "+employeeDetails.get("SOLID"));
		String solId = employeeDetails.containsKey("SOLID") ? employeeDetails.get("SOLID").toString() : "";
		System.out.println("SOLID:"+solId);
		String branchName = employeeDetails.containsKey("BranchName") ? employeeDetails.get("BranchName").toString() : "";
		System.out.println("BRANCHNAME:: " + branchName);
		//String solId = employeeDetailsJson.get("SOLID").toString();
		DBOperationsUtil dbOperationsUtil = new DBOperationsUtil();
		Connection dbConnection = dbOperationsUtil.getDBConnection();
		dbOperationsUtil.insertDataToAuditTable(dbConnection, userName, branchName, solId,repositoryName, ipAddress, eventStatus, eventType, fileName);
		
		
	}
}
