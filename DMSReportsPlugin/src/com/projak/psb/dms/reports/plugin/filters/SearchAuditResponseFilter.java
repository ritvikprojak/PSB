package com.projak.psb.dms.reports.plugin.filters;

import java.sql.Connection;

import javax.servlet.http.HttpServletRequest;

import com.ibm.ecm.extension.PluginResponseFilter;
import com.ibm.ecm.extension.PluginServiceCallbacks;
import com.ibm.json.java.JSONArray;
import com.ibm.json.java.JSONObject;
import com.projak.psb.dms.reports.plugin.utils.DBOperationsUtil;
import com.projak.psb.dms.reports.plugin.utils.GetEmployeeDetails;

/**
 * Provides an abstract class that is extended to create a filter for responses
 * from a particular service. The response from the service is provided to the
 * filter in JSON format before it is returned to the web browser. The filter
 * can then modify that response, and the modified response is returned to the
 * web browser.
 */
public class SearchAuditResponseFilter extends PluginResponseFilter {

	/**
	 * Returns an array of the services that are extended by this filter.
	 * 
	 * @return A <code>String</code> array of names of the services. These are
	 *         the servlet paths or Struts action names.
	 */
	public String[] getFilteredServices() {
		return new String[] { "/p8/search" };
	}

	/**
	 * Filters the response from the service.
	 * 
	 * @param serverType
	 *            A <code>String</code> that indicates the type of server that
	 *            is associated with the service. This value can be one or more
	 *            of the following values separated by commas:
	 *            <table border="1">
	 *            <tr>
	 *            <th>Server Type</th>
	 *            <th>Description</th>
	 *            </tr>
	 *            <tr>
	 *            <td><code>p8</code></td>
	 *            <td>IBM FileNet P8</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>cm</code></td>
	 *            <td>IBM Content Manager</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>od</code></td>
	 *            <td>IBM Content Manager OnDemand</td>
	 *            </tr>
	 *         	  <tr>
	 *         		<td><code>cmis</code></td>
	 *         		<td>Content Management Interoperability Services</td>
	 *         	  </tr>
	 *            <tr>
	 *            <td><code>common</code></td>
	 *            <td>For services that are not associated with a particular
	 *            server</td>
	 *            </tr>
	 *            </table>
	 * @param callbacks
	 *            An instance of the
	 *            <code>{@link com.ibm.ecm.extension.PluginServiceCallbacks PluginServiceCallbacks}</code>
	 *            class that contains functions that can be used by the service.
	 *            These functions provide access to plug-in configuration and
	 *            content server APIs.
	 * @param request
	 *            An <code>HttpServletRequest</code> object that provides the
	 *            request. The service can access the invocation parameters from
	 *            the request.
	 * @param jsonResponse
	 *            The <code>JSONObject</code> object that is generated by the
	 *            service. Typically, this object is serialized and sent as the
	 *            response. The filter modifies this object to change the
	 *            response that is sent.
	 * @throws Exception
	 *             For exceptions that occur when the service is running.
	 *             Information about the exception is logged as part of the
	 *             client logging and an error response is automatically
	 *             generated and returned.
	 */
	public void filter(String serverType, PluginServiceCallbacks callbacks,
			HttpServletRequest request, JSONObject jsonResponse) throws Exception {
		System.out.println("SearchAuditResponseFilter.filter()");
		String userName = request.getRemoteUser();
		String repositoryName = request.getParameter("repositoryId");
		String ipAddress = request.getRemoteAddr();
		System.out.println("IPAddress: "+ipAddress);
		String fileName = request.getParameter("criterias");
		//String newFIleName = makeSentence(fileName);
		String eventType = "Search";
		String eventStatus = "Search successful";
		String ldaploginid = request.getRemoteUser();
		GetEmployeeDetails empDetails = new GetEmployeeDetails();
		JSONObject employeeDetails = empDetails.getEmployeeDetails(userName);
		
		System.out.println("userDetailsObj from API: "+employeeDetails);
		//String solId = employeeDetailsJson.get("SOLID").toString();
		String solId = employeeDetails.containsKey("SOLID") ? employeeDetails.get("SOLID").toString() : "";
		System.out.println("SOLID:: "+solId);
		String branchName = employeeDetails.containsKey("BranchName") ? employeeDetails.get("BranchName").toString() : "";
		System.out.println("BRANCHNAME:: " + branchName);
		
		DBOperationsUtil dbOperationsUtil = new DBOperationsUtil();
		Connection dbConnection = dbOperationsUtil.getDBConnection();
		dbOperationsUtil.insertDataToAuditTable(dbConnection, userName, branchName, solId,repositoryName, ipAddress, eventStatus, eventType, fileName);
		
		
		
	}

	private String makeSentence(String fileName) {

        StringBuilder sentence = new StringBuilder();
        try {
            JSONArray jsonArray = JSONArray.parse(fileName);
            for (Object obj : jsonArray) {
                if (obj instanceof JSONObject) {
                    JSONObject jsonField = (JSONObject) obj;
                    String name = jsonField.get("name").toString();
                    String operator = jsonField.get("operator").toString();
                    JSONArray values = (JSONArray) jsonField.get("values");

                    if (!values.isEmpty()) {
                        sentence.append("Field: ").append(name).append(" Operator: ").append(operator).append(" Values: ");
                        for (int i = 0; i < values.size(); i++) {
                            sentence.append(values.get(i));
                            if (i < values.size() - 1) {
                                sentence.append(", ");
                            }
                        }
                        sentence.append("\n");
                    }
                }
            }

            if (sentence.length() > 0) {
                sentence.deleteCharAt(sentence.length() - 1); // Remove the trailing newline
            }
        } catch (Exception e) {
            sentence.append("Error: ").append(e.getMessage());
        }

        System.out.println(sentence.toString());

		return sentence.toString();
	}
	
}
