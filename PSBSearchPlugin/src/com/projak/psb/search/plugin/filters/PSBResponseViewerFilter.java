package com.projak.psb.search.plugin.filters;

import java.io.IOException;
import java.util.Date;
import java.util.Iterator;
import java.util.StringTokenizer;

import javax.security.auth.Subject;
import javax.servlet.http.HttpServletRequest;

import org.apache.http.HttpHeaders;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

import com.filenet.api.collection.AccessPermissionList;
import com.filenet.api.collection.CmRoleMemberList;
import com.filenet.api.constants.SecurityPrincipalType;
import com.filenet.api.core.Connection;
import com.filenet.api.core.Document;
import com.filenet.api.core.Domain;
import com.filenet.api.core.Factory;
import com.filenet.api.core.ObjectStore;
import com.filenet.api.security.AccessPermission;
import com.filenet.api.security.CmRole;
import com.filenet.api.security.CmRolePermission;
import com.filenet.api.security.CmRolePrincipalMember;
import com.filenet.api.security.CmStaticRole;
import com.filenet.api.security.SecurityPrincipal;
import com.filenet.api.security.User;
import com.filenet.api.util.Id;
import com.filenet.api.util.UserContext;
import com.filenet.apiimpl.core.AccessPermissionImpl;
import com.filenet.apiimpl.core.CmRolePermissionImpl;
import com.ibm.ecm.extension.PluginResponseFilter;
import com.ibm.ecm.extension.PluginServiceCallbacks;
import com.ibm.ecm.json.JSONViewoneBootstrapResponse;
import com.ibm.json.java.JSONObject;
import com.projak.psb.search.plugin.utils.PSBPropertyReader;

/**
 * Provides an abstract class that is extended to create a filter for responses
 * from a particular service. The response from the service is provided to the
 * filter in JSON format before it is returned to the web browser. The filter
 * can then modify that response, and the modified response is returned to the
 * web browser.
 */
public class PSBResponseViewerFilter extends PluginResponseFilter {

	/**
	 * Returns an array of the services that are extended by this filter.
	 * 
	 * @return A <code>String</code> array of names of the services. These are
	 *         the servlet paths or Struts action names.
	 */
	public String[] getFilteredServices() {
		return new String[] { "/p8/getViewoneBootstrap" };
	}

	/**
	 * Filters the response from the service.
	 * 
	 * @param serverType
	 *            A <code>String</code> that indicates the type of server that
	 *            is associated with the service. This value can be one or more
	 *            of the following values separated by commas:
	 *            <table border="1">
	 *            <tr>
	 *            <th>Server Type</th>
	 *            <th>Description</th>
	 *            </tr>
	 *            <tr>
	 *            <td><code>p8</code></td>
	 *            <td>IBM FileNet P8</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>cm</code></td>
	 *            <td>IBM Content Manager</td>
	 *            </tr>
	 *            <tr>
	 *            <td><code>od</code></td>
	 *            <td>IBM Content Manager OnDemand</td>
	 *            </tr>
	 *         	  <tr>
	 *         		<td><code>cmis</code></td>
	 *         		<td>Content Management Interoperability Services</td>
	 *         	  </tr>
	 *            <tr>
	 *            <td><code>common</code></td>
	 *            <td>For services that are not associated with a particular
	 *            server</td>
	 *            </tr>
	 *            </table>
	 * @param callbacks
	 *            An instance of the
	 *            <code>{@link com.ibm.ecm.extension.PluginServiceCallbacks PluginServiceCallbacks}</code>
	 *            class that contains functions that can be used by the service.
	 *            These functions provide access to plug-in configuration and
	 *            content server APIs.
	 * @param request
	 *            An <code>HttpServletRequest</code> object that provides the
	 *            request. The service can access the invocation parameters from
	 *            the request.
	 * @param jsonResponse
	 *            The <code>JSONObject</code> object that is generated by the
	 *            service. Typically, this object is serialized and sent as the
	 *            response. The filter modifies this object to change the
	 *            response that is sent.
	 * @throws Exception
	 *             For exceptions that occur when the service is running.
	 *             Information about the exception is logged as part of the
	 *             client logging and an error response is automatically
	 *             generated and returned.
	 */
	public void filter(String serverType, PluginServiceCallbacks callbacks,
			HttpServletRequest request, JSONObject jsonResponse) throws Exception {
		System.out.println("PSBResponseViewerFilter.filter()");
		String repositoryId = request.getParameter("repositoryId");
		boolean isDMS_Create = false;
		boolean isDMS_Modify = false;
		boolean isDMS_Delete = false;
		boolean isDMS_View = false;
		boolean isDMS_Print = false;
		boolean isDMS_Download = false;
		boolean isDMS_Annotation = false;
		
		Connection connection = callbacks.getP8Connection(repositoryId);
		Subject subject = callbacks.getP8Subject(repositoryId);
		UserContext.get().pushSubject(subject);
		Domain domain = callbacks.getP8Domain(repositoryId, null);
		ObjectStore objectStore = callbacks.getP8ObjectStore(repositoryId);
		
		String userId = request.getRemoteUser();
		
		User user2 = Factory.User.fetchInstance(connection, userId, null);
		System.out.println("DisplayName: "+user2.get_DisplayName());
		
		if (jsonResponse instanceof JSONViewoneBootstrapResponse) {
			
			JSONViewoneBootstrapResponse jvbr = (JSONViewoneBootstrapResponse) jsonResponse;
			System.out.println("jvbr is: " + jvbr);
			JSONObject jsonObject = (JSONObject) jvbr.get(PSBPropertyReader.getResourceBundle().getString("jsonObject"));
			String docInfo = (String) jsonObject.get(PSBPropertyReader.getResourceBundle().getString("docInfo"));
			//String object = "Audit,{25072E22-E0AD-469D-A194-D21C3A737F64},{306C3687-0000-CF13-AA00-B73A3A315517}";
			StringTokenizer tokenizer = new StringTokenizer(docInfo, ",");
			String[] strTokenArray = null;
			strTokenArray = new String[tokenizer.countTokens()];
			int count = 0;
			while(tokenizer.hasMoreTokens()){
				strTokenArray[count++] = tokenizer.nextToken();
			}
			System.out.println("docId: "+strTokenArray[2].toString());
			String docId = strTokenArray[2].toString();
			jvbr.setViewOneParameter(PSBPropertyReader.getResourceBundle().getString("viewOneParameter"),PSBPropertyReader.getResourceBundle().getString("viewOneParameterValue"));
			//jvbr.setViewOneParameter("fileButtonSave","true");
			jvbr.setAnnotationHideButtons(PSBPropertyReader.getResourceBundle().getString("annotationHideButtons"));
			
			Document document = Factory.Document.fetchInstance(objectStore, docId, null);
			//Document document = Factory.Document.fetchInstance(objectStore, "{00A73887-0000-C71B-AB66-D77E6C323FD9}", null);
			System.out.println(document.get_MimeType());
			System.out.println(document.get_ClassDescription().get_DisplayName());
			//ClassDescription clasDec = document.get_ClassDescription();
			try {
				AccessPermissionList docPerms = document.get_Permissions();
				Iterator itr = docPerms.iterator();
				while (itr.hasNext()) {
					AccessPermission object = (AccessPermission) itr.next();
					System.out.println("Object get_GranteeName: "+object.get_GranteeName());
					System.out.println("Object get_GranteeType: "+object.get_GranteeType());
					if(object instanceof CmRolePermission) {
						System.out.println("It is Role");
						CmRolePermission permission = (CmRolePermission) object;
						System.out.println("Permission Source: "+permission.get_PermissionSource().toString());
						System.out.println("permission : "+permission.get_Role().get_Permissions());
						CmRole role = permission.get_Role();
						System.out.println("Role Object from Permission: "+role);
						System.out.println(role.get_DateCreated());
						System.out.println(role.get_Id());
						System.out.println(role.get_DisplayName());
						com.filenet.api.security.CmStaticRole rolesStatic = Factory.CmStaticRole.fetchInstance(objectStore, role.get_Id(), null);
						
						System.out.println(role.get_DisplayName()+"??::"+role.get_DisplayName().equalsIgnoreCase("DMS_View"));
						System.out.println(role.get_DisplayName()+"??::"+role.get_DisplayName().equalsIgnoreCase("DMS_Print"));
						System.out.println(role.get_DisplayName()+"??::"+role.get_DisplayName().equalsIgnoreCase("DMS_Annotate"));
						
						if (role.get_DisplayName().equalsIgnoreCase(PSBPropertyReader.getResourceBundle().getString("roleDisplayName"))) {
							System.out.println(" in DMS_View");
							isDMS_View = checkUserExist(rolesStatic,userId);
							System.out.println("isUserExists? : "+isDMS_View);
							if(isDMS_View){
								System.out.println("User is access for the View.");
							}else{
								System.out.println("User is access for the View.");
								jvbr.setGetContentUrl(PSBPropertyReader.getResourceBundle().getString("setGetContentUrl"));
								jvbr.setColdTemplateUrl(PSBPropertyReader.getResourceBundle().getString("setColdTemplateUrl"));
								jvbr.put(PSBPropertyReader.getResourceBundle().getString("jsonObjectKey2"), PSBPropertyReader.getResourceBundle().getString("jsonObjectValue2"));
							}
						}else if(role.get_DisplayName().equalsIgnoreCase(PSBPropertyReader.getResourceBundle().getString("roleDisplayName2"))){
							System.out.println("in DMS_Print");
							isDMS_Print = checkUserExist(rolesStatic,userId);
							System.out.println("isUserExists? : "+isDMS_Print);
							if (isDMS_Print) {
								jvbr.setViewOneParameter(PSBPropertyReader.getResourceBundle().getString("setViewOneParameter"),PSBPropertyReader.getResourceBundle().getString("setViewOneParameterValue"));
							}
						}else if (role.get_DisplayName().equalsIgnoreCase(PSBPropertyReader.getResourceBundle().getString("roleDisplayName3"))) {
							System.out.println("in DMS_Annotate");
							isDMS_Annotation = checkUserExist(rolesStatic,userId);
							System.out.println("isUserExists? : "+isDMS_Annotation);
							if(isDMS_Annotation){
								jvbr.setAnnotationHideButtons(PSBPropertyReader.getResourceBundle().getString("setAnnotationHideButtons"));
							}
						}
					}else{
						System.out.println("Not a role");
					}
					//System.out.println(object.getProperties());
				}
			} catch (Exception e) {
				System.out.println("Exception Message: "+e.getMessage());
				System.out.println("Exception Cause: "+e.getCause().toString());
			}
			
			
			
			
		}
	}
	private static boolean checkUserExist(com.filenet.api.security.CmStaticRole cm, String userId) {
		System.out.println("HOITViewerFilter.checkUserExist()");
		System.out.println("RoleName--" + cm.get_DisplayName());

		CmRoleMemberList roleMembersList = cm.get_RoleMembers();
		Iterator iterator = roleMembersList.iterator();
		System.out.println("User Contains" + userId);

		Boolean userExist = false;
		while (iterator.hasNext()) {

			CmRolePrincipalMember crp = (CmRolePrincipalMember) iterator.next();
			System.out.println("user" + crp.get_MemberPrincipal().getProperties().getStringValue("Name"));
			String memberName = crp.get_MemberPrincipal().getProperties().getStringValue("Name");
			System.out.println("usercontains" + memberName.toUpperCase().contains(userId.toUpperCase()));
			if (memberName.toUpperCase().contains(userId.toUpperCase())) {
				userExist = true;
				System.out.println("User Contains true" );

				break;
			}
		}
		return userExist;

	}

}
